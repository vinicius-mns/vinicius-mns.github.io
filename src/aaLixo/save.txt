<script setup lang="ts">
import { ref, onMounted, onBeforeUnmount } from 'vue'
import * as THREE from 'three'

const canvasContainer = ref<HTMLDivElement | null>(null)
let renderer: THREE.WebGLRenderer
let scene: THREE.Scene
let camera: THREE.PerspectiveCamera
let sphereMesh: THREE.Mesh // Usando Mesh para a esfera

onMounted(() => {
  // Criar a cena
  scene = new THREE.Scene()

  // Criar a câmera
  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)
  camera.position.z = 5

  // Criar o renderizador
  renderer = new THREE.WebGLRenderer()
  renderer.setSize(window.innerWidth, window.innerHeight)
  if (canvasContainer.value) {
    canvasContainer.value.appendChild(renderer.domElement)
  }

  // Criar uma esfera com distorção
  const geometry = new THREE.SphereGeometry(2.8, 32, 32)
  const material = new THREE.ShaderMaterial({
    vertexShader: `
      varying vec3 vNormal;
      varying vec3 vPosition;
      uniform float time;

      void main() {
        vNormal = normal;
        vPosition = position;

        // Distorção simples
        float distortion = 0.1; // Fator de distorção
        vec3 newPosition = position + normal * sin(position.y * 10.0 + time) * distortion;

        gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);
      }
    `,
    fragmentShader: `
      varying vec3 vNormal;

      void main() {
        // Cor baseada na normal
        gl_FragColor = vec4(0.5 + 0.5 * vNormal, 1.0);
      }
    `,
    uniforms: {
      time: { value: 0 }
    }
  })

  sphereMesh = new THREE.Mesh(geometry, material) // Usando Mesh
  scene.add(sphereMesh)

  // Função de animação
  const animate = () => {
    requestAnimationFrame(animate)
    sphereMesh.rotation.x += 0.01
    sphereMesh.rotation.y += 0.01

    // Atualizar o tempo para a distorção
    material.uniforms.time.value += 0.05

    renderer.render(scene, camera)
  }

  animate()

  // Ajustar o tamanho do canvas ao redimensionar a janela
  window.addEventListener('resize', onWindowResize)
})

onBeforeUnmount(() => {
  // Limpar o evento de redimensionamento
  window.removeEventListener('resize', onWindowResize)
})

const onWindowResize = () => {
  if (camera) {
    camera.aspect = window.innerWidth / window.innerHeight
    camera.updateProjectionMatrix()
  }
  if (renderer) {
    renderer.setSize(window.innerWidth, window.innerHeight)
  }
}
</script>








<script setup lang="ts">
import { ref, onMounted, onBeforeUnmount } from 'vue'
import * as THREE from 'three'

const canvasContainer = ref<HTMLDivElement | null>(null)
let renderer: THREE.WebGLRenderer
let scene: THREE.Scene
let camera: THREE.PerspectiveCamera
let sphereLines: THREE.LineSegments

onMounted(() => {
  // Criar a cena
  scene = new THREE.Scene()

  // Criar a câmera
  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)
  camera.position.z = 5

  // Criar o renderizador
  renderer = new THREE.WebGLRenderer()
  renderer.setSize(window.innerWidth, window.innerHeight)
  if (canvasContainer.value) {
    canvasContainer.value.appendChild(renderer.domElement)
  }

  // Criar uma esfera de linhas
  const geometry = new THREE.SphereGeometry(2.8, 32, 32)
  const edges = new THREE.EdgesGeometry(geometry) // Cria a geometria das arestas
  const material = new THREE.LineBasicMaterial({ color: 'white' })
  sphereLines = new THREE.LineSegments(edges, material)
  scene.add(sphereLines)

  // Função de animação
  const animate = () => {
    requestAnimationFrame(animate)
    sphereLines.rotation.x += 0.01
    sphereLines.rotation.y += 0.01
    renderer.render(scene, camera)
  }

  animate()

  // Ajustar o tamanho do canvas ao redimensionar a janela
  window.addEventListener('resize', onWindowResize)
})

onBeforeUnmount(() => {
  // Limpar o evento de redimensionamento
  window.removeEventListener('resize', onWindowResize)
})

const onWindowResize = () => {
  if (camera) {
    camera.aspect = window.innerWidth / window.innerHeight
    camera.updateProjectionMatrix()
  }
  if (renderer) {
    renderer.setSize(window.innerWidth, window.innerHeight)
  }
}
</script>





<script setup lang="ts">
import { ref, onMounted, onBeforeUnmount } from 'vue'
import * as THREE from 'three'

const canvasContainer = ref<HTMLDivElement | null>(null)
let renderer: THREE.WebGLRenderer
let scene: THREE.Scene
let camera: THREE.PerspectiveCamera
let sphereLines: THREE.LineSegments
let material: THREE.ShaderMaterial

onMounted(() => {
  // Criar a cena
  scene = new THREE.Scene()

  // Criar a câmera
  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)
  camera.position.z = 5

  // Criar o renderizador
  renderer = new THREE.WebGLRenderer()
  renderer.setSize(window.innerWidth, window.innerHeight)
  if (canvasContainer.value) {
    canvasContainer.value.appendChild(renderer.domElement)
  }

  // Criar geometria da esfera
  const geometry = new THREE.SphereGeometry(2.8, 64, 64)
  const edges = new THREE.EdgesGeometry(geometry)

  // Material com shader de distorção
  material = new THREE.ShaderMaterial({
    vertexShader: `
      uniform float uTime;
      
      vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
      vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
      vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }
      vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }
      
      float snoise(vec3 v) { 
        const vec2 C = vec2(1.0/6.0, 1.0/3.0);
        const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);

        vec3 i = floor(v + dot(v, C.yyy));
        vec3 x0 = v - i + dot(i, C.xxx);

        vec3 g = step(x0.yzx, x0.xyz);
        vec3 l = 1.0 - g;
        vec3 i1 = min(g.xyz, l.zxy);
        vec3 i2 = max(g.xyz, l.zxy);

        vec3 x1 = x0 - i1 + C.xxx;
        vec3 x2 = x0 - i2 + C.yyy;
        vec3 x3 = x0 - D.yyy;

        i = mod289(i);
        vec4 p = permute(permute(permute( 
                  i.z + vec4(0.0, i1.z, i2.z, 1.0))
                + i.y + vec4(0.0, i1.y, i2.y, 1.0))
                + i.x + vec4(0.0, i1.x, i2.x, 1.0));

        float n_ = 0.142857142857;
        vec3 ns = n_ * D.wyz - D.xzx;

        vec4 j = p - 49.0 * floor(p * ns.z * ns.z);

        vec4 x_ = floor(j * ns.z);
        vec4 y_ = floor(j - 7.0 * x_ );

        vec4 x = x_ * ns.x + ns.yyyy;
        vec4 y = y_ * ns.x + ns.yyyy;
        vec4 h = 1.0 - abs(x) - abs(y);

        vec4 b0 = vec4(x.xy, y.xy);
        vec4 b1 = vec4(x.zw, y.zw);

        vec4 s0 = floor(b0)*2.0 + 1.0;
        vec4 s1 = floor(b1)*2.0 + 1.0;
        vec4 sh = -step(h, vec4(0.0));

        vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;
        vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;

        vec3 p0 = vec3(a0.xy,h.x);
        vec3 p1 = vec3(a0.zw,h.y);
        vec3 p2 = vec3(a1.xy,h.z);
        vec3 p3 = vec3(a1.zw,h.w);

        vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)));
        p0 *= norm.x;
        p1 *= norm.y;
        p2 *= norm.z;
        p3 *= norm.w;

        vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
        m = m * m;
        return 42.0 * dot(m*m, vec4(dot(p0,x0), dot(p1,x1), 
                                  dot(p2,x2), dot(p3,x3)));
      }

      void main() {
        vec3 pos = position;
        float noise = snoise(pos * 1.5 + vec3(uTime * 0.5));
        pos += normal * noise * 0.3;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
      }
    `,
    fragmentShader: `
      void main() {
        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
      }
    `,
    uniforms: {
      uTime: { value: 0 }
    }
  })

  sphereLines = new THREE.LineSegments(edges, material)
  scene.add(sphereLines)

  // Função de animação
  const animate = () => {
    requestAnimationFrame(animate)
    sphereLines.rotation.x += 0.01
    sphereLines.rotation.y += 0.01
    material.uniforms.uTime.value += 0.02
    renderer.render(scene, camera)
  }

  animate()

  // Ajustar o tamanho do canvas ao redimensionar a janela
  window.addEventListener('resize', onWindowResize)
})

onBeforeUnmount(() => {
  window.removeEventListener('resize', onWindowResize)
})

const onWindowResize = () => {
  camera.aspect = window.innerWidth / window.innerHeight
  camera.updateProjectionMatrix()
  renderer.setSize(window.innerWidth, window.innerHeight)
}
</script>

<template>
  <div ref="canvasContainer" class="canvas-container"></div>
</template>

<style>
.canvas-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100dvh;
  overflow: hidden;
  background: #000;
}
</style>
